// Code generated by protoc-gen-go.
// source: haz.proto
// DO NOT EDIT!

/*
Package haz_pb is a generated protocol buffer package.

It is generated from these files:
	haz.proto

It has these top-level messages:
	Quake
	Timestamp
	Quakes
	Volcano
	VAL
	Volcanoes
	MMI
	Shaking
	Story
	News
	Rate
	QuakeStats
	QuakeTechnical
	RealQuantity
	StationMagnitude
	Magnitude
	Pick
	Waveform
*/
package haz_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Quake is for earthquake information.
type Quake struct {
	// the unique public identifier for this quake.
	PublicID string `protobuf:"bytes,1,opt,name=public_iD,json=publicID" json:"public_iD,omitempty"`
	// the origin time of the quake.
	Time *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// the modification time of the quake information.
	ModificationTime *Timestamp `protobuf:"bytes,3,opt,name=modification_time,json=modificationTime" json:"modification_time,omitempty"`
	// latitude of the quake location.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the quake location.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// the depth of the quake in km.
	Depth float64 `protobuf:"fixed64,6,opt,name=depth" json:"depth,omitempty"`
	// magnitude of the quake.
	Magnitude float64 `protobuf:"fixed64,7,opt,name=magnitude" json:"magnitude,omitempty"`
	// distance and direction to the nearest locality.
	Locality string `protobuf:"bytes,8,opt,name=locality" json:"locality,omitempty"`
	// the quality of this information; `best`, `good`, `caution`, `deleted`.
	Quality string `protobuf:"bytes,9,opt,name=quality" json:"quality,omitempty"`
	// the calculated MMI shaking at the closest locality in the New Zealand region.
	Mmi int32 `protobuf:"varint,10,opt,name=mmi" json:"mmi,omitempty"`
}

func (m *Quake) Reset()                    { *m = Quake{} }
func (m *Quake) String() string            { return proto.CompactTextString(m) }
func (*Quake) ProtoMessage()               {}
func (*Quake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Quake) GetPublicID() string {
	if m != nil {
		return m.PublicID
	}
	return ""
}

func (m *Quake) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Quake) GetModificationTime() *Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

func (m *Quake) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Quake) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Quake) GetDepth() float64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Quake) GetMagnitude() float64 {
	if m != nil {
		return m.Magnitude
	}
	return 0
}

func (m *Quake) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *Quake) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

func (m *Quake) GetMmi() int32 {
	if m != nil {
		return m.Mmi
	}
	return 0
}

// Timestamp for encoding time stamps.
type Timestamp struct {
	// Unix time in seconds
	Sec int64 `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	// Fractional part of time in nanoseconds.
	Nsec int64 `protobuf:"varint,2,opt,name=nsec" json:"nsec,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timestamp) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *Timestamp) GetNsec() int64 {
	if m != nil {
		return m.Nsec
	}
	return 0
}

type Quakes struct {
	Quakes []*Quake `protobuf:"bytes,1,rep,name=quakes" json:"quakes,omitempty"`
}

func (m *Quakes) Reset()                    { *m = Quakes{} }
func (m *Quakes) String() string            { return proto.CompactTextString(m) }
func (*Quakes) ProtoMessage()               {}
func (*Quakes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Quakes) GetQuakes() []*Quake {
	if m != nil {
		return m.Quakes
	}
	return nil
}

type Volcano struct {
	// a unique identifier for the volcano.
	VolcanoID string `protobuf:"bytes,1,opt,name=volcano_iD,json=volcanoID" json:"volcano_iD,omitempty"`
	// the volcano title.
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// latitude of the volcano.
	Latitude float64 `protobuf:"fixed64,3,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the volcano.
	Longitude float64 `protobuf:"fixed64,4,opt,name=longitude" json:"longitude,omitempty"`
	Val       *VAL    `protobuf:"bytes,5,opt,name=val" json:"val,omitempty"`
}

func (m *Volcano) Reset()                    { *m = Volcano{} }
func (m *Volcano) String() string            { return proto.CompactTextString(m) }
func (*Volcano) ProtoMessage()               {}
func (*Volcano) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Volcano) GetVolcanoID() string {
	if m != nil {
		return m.VolcanoID
	}
	return ""
}

func (m *Volcano) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Volcano) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Volcano) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Volcano) GetVal() *VAL {
	if m != nil {
		return m.Val
	}
	return nil
}

// volcanic alert level.
type VAL struct {
	Level    int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Activity string `protobuf:"bytes,2,opt,name=activity" json:"activity,omitempty"`
	Hazards  string `protobuf:"bytes,3,opt,name=hazards" json:"hazards,omitempty"`
}

func (m *VAL) Reset()                    { *m = VAL{} }
func (m *VAL) String() string            { return proto.CompactTextString(m) }
func (*VAL) ProtoMessage()               {}
func (*VAL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VAL) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *VAL) GetActivity() string {
	if m != nil {
		return m.Activity
	}
	return ""
}

func (m *VAL) GetHazards() string {
	if m != nil {
		return m.Hazards
	}
	return ""
}

type Volcanoes struct {
	Volcanoes []*Volcano `protobuf:"bytes,1,rep,name=volcanoes" json:"volcanoes,omitempty"`
}

func (m *Volcanoes) Reset()                    { *m = Volcanoes{} }
func (m *Volcanoes) String() string            { return proto.CompactTextString(m) }
func (*Volcanoes) ProtoMessage()               {}
func (*Volcanoes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Volcanoes) GetVolcanoes() []*Volcano {
	if m != nil {
		return m.Volcanoes
	}
	return nil
}

type MMI struct {
	// latitude of the mmi.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// longitude of the mmi.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// the mmi at the location.  Currently the max mmi.
	Mmi int32 `protobuf:"varint,3,opt,name=mmi" json:"mmi,omitempty"`
	// count of mmi values at the location.
	Count int32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *MMI) Reset()                    { *m = MMI{} }
func (m *MMI) String() string            { return proto.CompactTextString(m) }
func (*MMI) ProtoMessage()               {}
func (*MMI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MMI) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *MMI) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *MMI) GetMmi() int32 {
	if m != nil {
		return m.Mmi
	}
	return 0
}

func (m *MMI) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Shaking struct {
	Mmi        []*MMI          `protobuf:"bytes,1,rep,name=mmi" json:"mmi,omitempty"`
	MmiSummary map[int32]int32 `protobuf:"bytes,2,rep,name=mmi_summary,json=mmiSummary" json:"mmi_summary,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MmiTotal   int32           `protobuf:"varint,3,opt,name=mmi_total,json=mmiTotal" json:"mmi_total,omitempty"`
}

func (m *Shaking) Reset()                    { *m = Shaking{} }
func (m *Shaking) String() string            { return proto.CompactTextString(m) }
func (*Shaking) ProtoMessage()               {}
func (*Shaking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Shaking) GetMmi() []*MMI {
	if m != nil {
		return m.Mmi
	}
	return nil
}

func (m *Shaking) GetMmiSummary() map[int32]int32 {
	if m != nil {
		return m.MmiSummary
	}
	return nil
}

func (m *Shaking) GetMmiTotal() int32 {
	if m != nil {
		return m.MmiTotal
	}
	return 0
}

type Story struct {
	Title     string     `protobuf:"bytes,1,opt,name=Title,json=title" json:"Title,omitempty"`
	Link      string     `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	Published *Timestamp `protobuf:"bytes,3,opt,name=published" json:"published,omitempty"`
}

func (m *Story) Reset()                    { *m = Story{} }
func (m *Story) String() string            { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()               {}
func (*Story) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Story) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Story) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Story) GetPublished() *Timestamp {
	if m != nil {
		return m.Published
	}
	return nil
}

type News struct {
	Stories []*Story `protobuf:"bytes,1,rep,name=stories" json:"stories,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *News) GetStories() []*Story {
	if m != nil {
		return m.Stories
	}
	return nil
}

type Rate struct {
	Time  *Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Count int32      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *Rate) Reset()                    { *m = Rate{} }
func (m *Rate) String() string            { return proto.CompactTextString(m) }
func (*Rate) ProtoMessage()               {}
func (*Rate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Rate) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Rate) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QuakeStats struct {
	// quakes per day
	PerDay []*Rate `protobuf:"bytes,1,rep,name=per_day,json=perDay" json:"per_day,omitempty"`
	// magnitude count over the last 7 days
	Week map[int32]int32 `protobuf:"bytes,2,rep,name=week" json:"week,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// magnitude count over the last 28 days
	Month map[int32]int32 `protobuf:"bytes,3,rep,name=month" json:"month,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// magnitude count over the last 365 days
	Year map[int32]int32 `protobuf:"bytes,4,rep,name=year" json:"year,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *QuakeStats) Reset()                    { *m = QuakeStats{} }
func (m *QuakeStats) String() string            { return proto.CompactTextString(m) }
func (*QuakeStats) ProtoMessage()               {}
func (*QuakeStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QuakeStats) GetPerDay() []*Rate {
	if m != nil {
		return m.PerDay
	}
	return nil
}

func (m *QuakeStats) GetWeek() map[int32]int32 {
	if m != nil {
		return m.Week
	}
	return nil
}

func (m *QuakeStats) GetMonth() map[int32]int32 {
	if m != nil {
		return m.Month
	}
	return nil
}

func (m *QuakeStats) GetYear() map[int32]int32 {
	if m != nil {
		return m.Year
	}
	return nil
}

// QuakeTechnical for encoding technical information about a quake.
// More information than haz.Quake.
type QuakeTechnical struct {
	PublicID         string        `protobuf:"bytes,1,opt,name=public_iD,json=publicID" json:"public_iD,omitempty"`
	Type             string        `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Agency           string        `protobuf:"bytes,3,opt,name=agency" json:"agency,omitempty"`
	Time             *Timestamp    `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
	ModificationTime *Timestamp    `protobuf:"bytes,5,opt,name=modification_time,json=modificationTime" json:"modification_time,omitempty"`
	Latitude         *RealQuantity `protobuf:"bytes,6,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *RealQuantity `protobuf:"bytes,7,opt,name=longitude" json:"longitude,omitempty"`
	Depth            *RealQuantity `protobuf:"bytes,8,opt,name=depth" json:"depth,omitempty"`
	DepthType        string        `protobuf:"bytes,9,opt,name=depth_type,json=depthType" json:"depth_type,omitempty"`
	Method           string        `protobuf:"bytes,10,opt,name=method" json:"method,omitempty"`
	EarthModel       string        `protobuf:"bytes,11,opt,name=earth_model,json=earthModel" json:"earth_model,omitempty"`
	EvaluationMode   string        `protobuf:"bytes,12,opt,name=evaluation_mode,json=evaluationMode" json:"evaluation_mode,omitempty"`
	EvaluationStatus string        `protobuf:"bytes,13,opt,name=evaluation_status,json=evaluationStatus" json:"evaluation_status,omitempty"`
	UsedPhaseCount   int64         `protobuf:"varint,14,opt,name=used_phase_count,json=usedPhaseCount" json:"used_phase_count,omitempty"`
	UsedStationCount int64         `protobuf:"varint,15,opt,name=used_station_count,json=usedStationCount" json:"used_station_count,omitempty"`
	StandardError    float64       `protobuf:"fixed64,16,opt,name=standard_error,json=standardError" json:"standard_error,omitempty"`
	AzimuthalGap     float64       `protobuf:"fixed64,17,opt,name=azimuthal_gap,json=azimuthalGap" json:"azimuthal_gap,omitempty"`
	MinimumDistance  float64       `protobuf:"fixed64,18,opt,name=minimum_distance,json=minimumDistance" json:"minimum_distance,omitempty"`
	MaximumDistance  float64       `protobuf:"fixed64,19,opt,name=maximum_distance,json=maximumDistance" json:"maximum_distance,omitempty"`
	MedianDistance   float64       `protobuf:"fixed64,20,opt,name=median_distance,json=medianDistance" json:"median_distance,omitempty"`
	Pick             []*Pick       `protobuf:"bytes,21,rep,name=pick" json:"pick,omitempty"`
	Magnitude        *RealQuantity `protobuf:"bytes,22,opt,name=magnitude" json:"magnitude,omitempty"`
	MagnitudeType    string        `protobuf:"bytes,23,opt,name=magnitude_type,json=magnitudeType" json:"magnitude_type,omitempty"`
	Magnitudes       []*Magnitude  `protobuf:"bytes,24,rep,name=magnitudes" json:"magnitudes,omitempty"`
}

func (m *QuakeTechnical) Reset()                    { *m = QuakeTechnical{} }
func (m *QuakeTechnical) String() string            { return proto.CompactTextString(m) }
func (*QuakeTechnical) ProtoMessage()               {}
func (*QuakeTechnical) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QuakeTechnical) GetPublicID() string {
	if m != nil {
		return m.PublicID
	}
	return ""
}

func (m *QuakeTechnical) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QuakeTechnical) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *QuakeTechnical) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *QuakeTechnical) GetModificationTime() *Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

func (m *QuakeTechnical) GetLatitude() *RealQuantity {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *QuakeTechnical) GetLongitude() *RealQuantity {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *QuakeTechnical) GetDepth() *RealQuantity {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *QuakeTechnical) GetDepthType() string {
	if m != nil {
		return m.DepthType
	}
	return ""
}

func (m *QuakeTechnical) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *QuakeTechnical) GetEarthModel() string {
	if m != nil {
		return m.EarthModel
	}
	return ""
}

func (m *QuakeTechnical) GetEvaluationMode() string {
	if m != nil {
		return m.EvaluationMode
	}
	return ""
}

func (m *QuakeTechnical) GetEvaluationStatus() string {
	if m != nil {
		return m.EvaluationStatus
	}
	return ""
}

func (m *QuakeTechnical) GetUsedPhaseCount() int64 {
	if m != nil {
		return m.UsedPhaseCount
	}
	return 0
}

func (m *QuakeTechnical) GetUsedStationCount() int64 {
	if m != nil {
		return m.UsedStationCount
	}
	return 0
}

func (m *QuakeTechnical) GetStandardError() float64 {
	if m != nil {
		return m.StandardError
	}
	return 0
}

func (m *QuakeTechnical) GetAzimuthalGap() float64 {
	if m != nil {
		return m.AzimuthalGap
	}
	return 0
}

func (m *QuakeTechnical) GetMinimumDistance() float64 {
	if m != nil {
		return m.MinimumDistance
	}
	return 0
}

func (m *QuakeTechnical) GetMaximumDistance() float64 {
	if m != nil {
		return m.MaximumDistance
	}
	return 0
}

func (m *QuakeTechnical) GetMedianDistance() float64 {
	if m != nil {
		return m.MedianDistance
	}
	return 0
}

func (m *QuakeTechnical) GetPick() []*Pick {
	if m != nil {
		return m.Pick
	}
	return nil
}

func (m *QuakeTechnical) GetMagnitude() *RealQuantity {
	if m != nil {
		return m.Magnitude
	}
	return nil
}

func (m *QuakeTechnical) GetMagnitudeType() string {
	if m != nil {
		return m.MagnitudeType
	}
	return ""
}

func (m *QuakeTechnical) GetMagnitudes() []*Magnitude {
	if m != nil {
		return m.Magnitudes
	}
	return nil
}

type RealQuantity struct {
	Value       float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Uncertainty float64 `protobuf:"fixed64,2,opt,name=uncertainty" json:"uncertainty,omitempty"`
}

func (m *RealQuantity) Reset()                    { *m = RealQuantity{} }
func (m *RealQuantity) String() string            { return proto.CompactTextString(m) }
func (*RealQuantity) ProtoMessage()               {}
func (*RealQuantity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RealQuantity) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RealQuantity) GetUncertainty() float64 {
	if m != nil {
		return m.Uncertainty
	}
	return 0
}

type StationMagnitude struct {
	Waveform  *Waveform     `protobuf:"bytes,1,opt,name=waveform" json:"waveform,omitempty"`
	Magnitude *RealQuantity `protobuf:"bytes,2,opt,name=magnitude" json:"magnitude,omitempty"`
	Type      string        `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Azimuth   float64       `protobuf:"fixed64,4,opt,name=azimuth" json:"azimuth,omitempty"`
	Distance  float64       `protobuf:"fixed64,5,opt,name=distance" json:"distance,omitempty"`
	Residual  float64       `protobuf:"fixed64,6,opt,name=residual" json:"residual,omitempty"`
	Weight    float64       `protobuf:"fixed64,7,opt,name=weight" json:"weight,omitempty"`
	Amplitude *RealQuantity `protobuf:"bytes,8,opt,name=amplitude" json:"amplitude,omitempty"`
}

func (m *StationMagnitude) Reset()                    { *m = StationMagnitude{} }
func (m *StationMagnitude) String() string            { return proto.CompactTextString(m) }
func (*StationMagnitude) ProtoMessage()               {}
func (*StationMagnitude) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *StationMagnitude) GetWaveform() *Waveform {
	if m != nil {
		return m.Waveform
	}
	return nil
}

func (m *StationMagnitude) GetMagnitude() *RealQuantity {
	if m != nil {
		return m.Magnitude
	}
	return nil
}

func (m *StationMagnitude) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StationMagnitude) GetAzimuth() float64 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *StationMagnitude) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *StationMagnitude) GetResidual() float64 {
	if m != nil {
		return m.Residual
	}
	return 0
}

func (m *StationMagnitude) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *StationMagnitude) GetAmplitude() *RealQuantity {
	if m != nil {
		return m.Amplitude
	}
	return nil
}

type Magnitude struct {
	Magnitude        *RealQuantity       `protobuf:"bytes,1,opt,name=magnitude" json:"magnitude,omitempty"`
	Type             string              `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	StationCount     int64               `protobuf:"varint,3,opt,name=station_count,json=stationCount" json:"station_count,omitempty"`
	StationMagnitude []*StationMagnitude `protobuf:"bytes,4,rep,name=station_magnitude,json=stationMagnitude" json:"station_magnitude,omitempty"`
}

func (m *Magnitude) Reset()                    { *m = Magnitude{} }
func (m *Magnitude) String() string            { return proto.CompactTextString(m) }
func (*Magnitude) ProtoMessage()               {}
func (*Magnitude) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Magnitude) GetMagnitude() *RealQuantity {
	if m != nil {
		return m.Magnitude
	}
	return nil
}

func (m *Magnitude) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Magnitude) GetStationCount() int64 {
	if m != nil {
		return m.StationCount
	}
	return 0
}

func (m *Magnitude) GetStationMagnitude() []*StationMagnitude {
	if m != nil {
		return m.StationMagnitude
	}
	return nil
}

type Pick struct {
	Waveform         *Waveform  `protobuf:"bytes,1,opt,name=waveform" json:"waveform,omitempty"`
	Time             *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Phase            string     `protobuf:"bytes,3,opt,name=phase" json:"phase,omitempty"`
	Azimuth          float64    `protobuf:"fixed64,4,opt,name=azimuth" json:"azimuth,omitempty"`
	Distance         float64    `protobuf:"fixed64,5,opt,name=distance" json:"distance,omitempty"`
	Residual         float64    `protobuf:"fixed64,6,opt,name=residual" json:"residual,omitempty"`
	Weight           float64    `protobuf:"fixed64,7,opt,name=weight" json:"weight,omitempty"`
	EvaluationMode   string     `protobuf:"bytes,8,opt,name=evaluation_mode,json=evaluationMode" json:"evaluation_mode,omitempty"`
	EvaluationStatus string     `protobuf:"bytes,9,opt,name=evaluation_status,json=evaluationStatus" json:"evaluation_status,omitempty"`
}

func (m *Pick) Reset()                    { *m = Pick{} }
func (m *Pick) String() string            { return proto.CompactTextString(m) }
func (*Pick) ProtoMessage()               {}
func (*Pick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Pick) GetWaveform() *Waveform {
	if m != nil {
		return m.Waveform
	}
	return nil
}

func (m *Pick) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Pick) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Pick) GetAzimuth() float64 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Pick) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *Pick) GetResidual() float64 {
	if m != nil {
		return m.Residual
	}
	return 0
}

func (m *Pick) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Pick) GetEvaluationMode() string {
	if m != nil {
		return m.EvaluationMode
	}
	return ""
}

func (m *Pick) GetEvaluationStatus() string {
	if m != nil {
		return m.EvaluationStatus
	}
	return ""
}

type Waveform struct {
	Network  string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Station  string `protobuf:"bytes,2,opt,name=station" json:"station,omitempty"`
	Location string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Channel  string `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
}

func (m *Waveform) Reset()                    { *m = Waveform{} }
func (m *Waveform) String() string            { return proto.CompactTextString(m) }
func (*Waveform) ProtoMessage()               {}
func (*Waveform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Waveform) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Waveform) GetStation() string {
	if m != nil {
		return m.Station
	}
	return ""
}

func (m *Waveform) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Waveform) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*Quake)(nil), "haz.Quake")
	proto.RegisterType((*Timestamp)(nil), "haz.Timestamp")
	proto.RegisterType((*Quakes)(nil), "haz.Quakes")
	proto.RegisterType((*Volcano)(nil), "haz.Volcano")
	proto.RegisterType((*VAL)(nil), "haz.VAL")
	proto.RegisterType((*Volcanoes)(nil), "haz.Volcanoes")
	proto.RegisterType((*MMI)(nil), "haz.MMI")
	proto.RegisterType((*Shaking)(nil), "haz.Shaking")
	proto.RegisterType((*Story)(nil), "haz.Story")
	proto.RegisterType((*News)(nil), "haz.News")
	proto.RegisterType((*Rate)(nil), "haz.Rate")
	proto.RegisterType((*QuakeStats)(nil), "haz.QuakeStats")
	proto.RegisterType((*QuakeTechnical)(nil), "haz.QuakeTechnical")
	proto.RegisterType((*RealQuantity)(nil), "haz.RealQuantity")
	proto.RegisterType((*StationMagnitude)(nil), "haz.StationMagnitude")
	proto.RegisterType((*Magnitude)(nil), "haz.Magnitude")
	proto.RegisterType((*Pick)(nil), "haz.Pick")
	proto.RegisterType((*Waveform)(nil), "haz.Waveform")
}

func init() { proto.RegisterFile("haz.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0xdc, 0xb6,
	0x12, 0x86, 0x56, 0xda, 0x1f, 0xcd, 0xda, 0xeb, 0x35, 0x4f, 0x92, 0xa3, 0xe3, 0x93, 0xa0, 0x86,
	0xd2, 0x20, 0x4e, 0xeb, 0xb8, 0x6d, 0x7a, 0x91, 0xa0, 0x45, 0x80, 0x26, 0x75, 0x5a, 0x18, 0xc8,
	0x16, 0x89, 0x6c, 0x24, 0x68, 0x6f, 0x04, 0x46, 0x62, 0x56, 0xc4, 0xea, 0x2f, 0x12, 0x65, 0x77,
	0xfd, 0x1c, 0xbd, 0xed, 0x13, 0xf4, 0x09, 0x8a, 0xdc, 0xf4, 0x81, 0xfa, 0x10, 0x05, 0x87, 0xd4,
	0xcf, 0x1a, 0xb6, 0x61, 0xdf, 0xf4, 0x8e, 0xf3, 0xcd, 0x37, 0x1a, 0x72, 0x86, 0x33, 0x43, 0x81,
	0x1d, 0xd1, 0xd3, 0xbd, 0xbc, 0xc8, 0x44, 0x46, 0xcc, 0x88, 0x9e, 0xba, 0x1f, 0x7b, 0xd0, 0x7f,
	0x5d, 0xd1, 0x05, 0x23, 0xff, 0x07, 0x3b, 0xaf, 0xde, 0xc5, 0x3c, 0xf0, 0xf9, 0xbe, 0x63, 0x6c,
	0x1b, 0x3b, 0xb6, 0x37, 0x52, 0xc0, 0xc1, 0x3e, 0x71, 0xc1, 0x12, 0x3c, 0x61, 0x4e, 0x6f, 0xdb,
	0xd8, 0x19, 0x3f, 0x9a, 0xec, 0xc9, 0xaf, 0x1c, 0xf1, 0x84, 0x95, 0x82, 0x26, 0xb9, 0x87, 0x3a,
	0xf2, 0x2d, 0x6c, 0x26, 0x59, 0xc8, 0xdf, 0xf3, 0x80, 0x0a, 0x9e, 0xa5, 0x3e, 0x1a, 0x98, 0xe7,
	0x1a, 0x4c, 0xbb, 0x44, 0x09, 0x93, 0x2d, 0x18, 0xc5, 0x54, 0x70, 0x51, 0x85, 0xcc, 0xb1, 0xb6,
	0x8d, 0x1d, 0xc3, 0x6b, 0x64, 0x72, 0x1b, 0xec, 0x38, 0x4b, 0xe7, 0x4a, 0xd9, 0x47, 0x65, 0x0b,
	0x90, 0x1b, 0xd0, 0x0f, 0x59, 0x2e, 0x22, 0x67, 0x80, 0x1a, 0x25, 0x48, 0x9b, 0x84, 0xce, 0x53,
	0x65, 0x33, 0x54, 0x36, 0x0d, 0x80, 0xde, 0xb2, 0x80, 0xc6, 0x5c, 0x2c, 0x9d, 0x91, 0x3a, 0x6a,
	0x2d, 0x13, 0x07, 0x86, 0x1f, 0x2a, 0xa5, 0xb2, 0x51, 0x55, 0x8b, 0x64, 0x0a, 0x66, 0x92, 0x70,
	0x07, 0xb6, 0x8d, 0x9d, 0xbe, 0x27, 0x97, 0xee, 0x57, 0x60, 0x37, 0x87, 0x92, 0xea, 0x92, 0x05,
	0x18, 0x3a, 0xd3, 0x93, 0x4b, 0x42, 0xc0, 0x4a, 0x25, 0xd4, 0x43, 0x08, 0xd7, 0xee, 0x2e, 0x0c,
	0x30, 0xde, 0x25, 0x71, 0x61, 0xf0, 0x01, 0x57, 0x8e, 0xb1, 0x6d, 0xee, 0x8c, 0x1f, 0x01, 0x06,
	0x09, 0x95, 0x9e, 0xd6, 0xb8, 0xbf, 0x19, 0x30, 0x7c, 0x93, 0xc5, 0x01, 0x4d, 0x33, 0x72, 0x07,
	0xe0, 0x58, 0x2d, 0xdb, 0x0c, 0xd9, 0x1a, 0x39, 0xd8, 0x97, 0x71, 0x10, 0x5c, 0xc4, 0x2a, 0x47,
	0xb6, 0xa7, 0x84, 0x95, 0xb8, 0x9a, 0x97, 0xc5, 0xd5, 0x3a, 0x1b, 0xd7, 0x2d, 0x30, 0x8f, 0x69,
	0x8c, 0xf1, 0x1e, 0x3f, 0x1a, 0xe1, 0xde, 0xde, 0x3c, 0x7b, 0xe9, 0x49, 0xd0, 0x7d, 0x0d, 0xe6,
	0x9b, 0x67, 0x2f, 0xa5, 0xcb, 0x98, 0x1d, 0xb3, 0x18, 0x37, 0xd3, 0xf7, 0x94, 0x20, 0x5d, 0xd2,
	0x40, 0xf0, 0x63, 0x19, 0x41, 0xb5, 0x97, 0x46, 0x96, 0xc1, 0x8d, 0xe8, 0x29, 0x2d, 0xc2, 0x12,
	0x77, 0x63, 0x7b, 0xb5, 0xe8, 0x3e, 0x06, 0x5b, 0x1f, 0x94, 0x95, 0xe4, 0x33, 0xa8, 0x0f, 0xd6,
	0x44, 0x67, 0x4d, 0xed, 0x40, 0xa1, 0x5e, 0xab, 0x76, 0xe7, 0x60, 0xce, 0x66, 0x07, 0x2b, 0x07,
	0x35, 0x2e, 0x3b, 0x68, 0xef, 0xec, 0x41, 0x75, 0x5a, 0xcd, 0x26, 0xad, 0xf2, 0x5c, 0x41, 0x56,
	0xa5, 0x02, 0x83, 0xd2, 0xf7, 0x94, 0xe0, 0xfe, 0x65, 0xc0, 0xf0, 0x30, 0xa2, 0x0b, 0x9e, 0xce,
	0x65, 0x70, 0xa4, 0x8d, 0xda, 0x9a, 0x0a, 0xce, 0x6c, 0x76, 0xa0, 0xac, 0x9f, 0xc2, 0x38, 0x49,
	0xb8, 0x5f, 0x56, 0x49, 0x42, 0x0b, 0x19, 0x02, 0xc9, 0xb9, 0x8d, 0x1c, 0x6d, 0xbe, 0x37, 0x4b,
	0xf8, 0xa1, 0x52, 0xbf, 0x48, 0x45, 0xb1, 0xf4, 0x20, 0x69, 0x00, 0x59, 0x87, 0xd2, 0x5c, 0x64,
	0x82, 0xc6, 0x7a, 0x53, 0xa3, 0x24, 0xe1, 0x47, 0x52, 0xde, 0x7a, 0x0a, 0x1b, 0x67, 0x6c, 0xe5,
	0xf6, 0x17, 0x6c, 0xa9, 0x53, 0x20, 0x97, 0x72, 0xfb, 0xc7, 0x34, 0xae, 0xd4, 0x51, 0xfb, 0x9e,
	0x12, 0xbe, 0xe9, 0x3d, 0x31, 0x5c, 0x1f, 0xfa, 0x87, 0x22, 0x2b, 0x90, 0x72, 0x84, 0x97, 0xc5,
	0xe8, 0x5e, 0x16, 0x02, 0x56, 0xcc, 0xd3, 0x85, 0xce, 0x1a, 0xae, 0xc9, 0xae, 0x6e, 0x0b, 0x65,
	0xc4, 0xc2, 0x0b, 0xaa, 0xb9, 0x25, 0xb8, 0xbb, 0x60, 0xfd, 0xc4, 0x4e, 0x4a, 0xf2, 0x29, 0x0c,
	0x4b, 0x91, 0x15, 0xfc, 0xcc, 0xe5, 0x46, 0xe7, 0x5e, 0xad, 0x72, 0xbf, 0x03, 0xcb, 0xa3, 0x82,
	0x35, 0xdd, 0xc5, 0xb8, 0xa4, 0xbb, 0x34, 0x39, 0xe9, 0x75, 0x73, 0xf2, 0x77, 0x0f, 0x00, 0x2b,
	0xe6, 0x50, 0x50, 0x21, 0x4b, 0x6a, 0x98, 0xb3, 0xc2, 0x0f, 0xe9, 0x52, 0xbb, 0xb5, 0xf1, 0x5b,
	0xd2, 0x89, 0x37, 0xc8, 0x59, 0xb1, 0x4f, 0x97, 0xe4, 0x21, 0x58, 0x27, 0x8c, 0x2d, 0x74, 0x5e,
	0xfe, 0xd7, 0x16, 0x1d, 0x7e, 0x62, 0xef, 0x2d, 0x63, 0x0b, 0x95, 0x14, 0xa4, 0x91, 0x2f, 0xa1,
	0x9f, 0x64, 0xa9, 0x88, 0x1c, 0x13, 0xf9, 0x5b, 0x67, 0xf9, 0x33, 0xa9, 0x54, 0x06, 0x8a, 0x28,
	0x1d, 0x2c, 0x19, 0x2d, 0x1c, 0xeb, 0x7c, 0x07, 0x3f, 0x33, 0x5a, 0x68, 0x07, 0x92, 0xb6, 0xf5,
	0x18, 0xec, 0xc6, 0xe7, 0x75, 0x92, 0xb9, 0xf5, 0x04, 0xa0, 0x75, 0x7e, 0x2d, 0xcb, 0xc7, 0x60,
	0x37, 0xbb, 0xb8, 0xd6, 0xfd, 0xf9, 0x38, 0x84, 0x09, 0x1e, 0xe5, 0x88, 0x05, 0x51, 0xca, 0x03,
	0x1a, 0x5f, 0x3e, 0x36, 0x08, 0x58, 0x62, 0x99, 0xd7, 0x2d, 0x09, 0xd7, 0xe4, 0x16, 0x0c, 0xe8,
	0x9c, 0xa5, 0xc1, 0x52, 0x77, 0x00, 0x2d, 0x35, 0x97, 0xc0, 0xba, 0xee, 0x88, 0xe9, 0x5f, 0x71,
	0xc4, 0x3c, 0xec, 0x74, 0x88, 0x01, 0xda, 0x6c, 0xaa, 0xdb, 0xc1, 0x68, 0xfc, 0xba, 0xa2, 0xa9,
	0xe0, 0x62, 0xd9, 0x69, 0x1a, 0x5f, 0x74, 0x9b, 0xc6, 0xf0, 0x22, 0x7e, 0xa7, 0x8f, 0xdc, 0xaf,
	0x07, 0xd1, 0xe8, 0x22, 0xb2, 0x9e, 0x4d, 0x77, 0x00, 0x70, 0xe1, 0x63, 0x6c, 0xd4, 0x90, 0xb1,
	0x11, 0x39, 0xd2, 0x01, 0x4a, 0x98, 0x88, 0xb2, 0x10, 0x27, 0x8d, 0xed, 0x69, 0x89, 0x7c, 0x02,
	0x63, 0x46, 0x0b, 0x11, 0xf9, 0x49, 0x16, 0xb2, 0xd8, 0x19, 0xa3, 0x12, 0x10, 0x9a, 0x49, 0x84,
	0xdc, 0x87, 0x0d, 0x26, 0x73, 0xa5, 0x62, 0x23, 0x59, 0xce, 0x1a, 0x92, 0x26, 0x2d, 0x2c, 0x99,
	0xe4, 0x73, 0xd8, 0xec, 0x10, 0x4b, 0x41, 0x45, 0x55, 0x3a, 0xeb, 0x48, 0x9d, 0xb6, 0x8a, 0x43,
	0xc4, 0xc9, 0x0e, 0x4c, 0xab, 0x92, 0x85, 0x7e, 0x1e, 0xd1, 0x92, 0xf9, 0xaa, 0x06, 0x27, 0x38,
	0xd0, 0x26, 0x12, 0x7f, 0x25, 0xe1, 0xef, 0x25, 0x4a, 0x76, 0x81, 0x20, 0x53, 0x7e, 0x50, 0x7e,
	0x58, 0x71, 0x37, 0x90, 0x8b, 0xdf, 0x38, 0x54, 0x0a, 0xc5, 0xbe, 0x07, 0x93, 0x52, 0xd0, 0x34,
	0xa4, 0x45, 0xe8, 0xb3, 0xa2, 0xc8, 0x0a, 0x67, 0x8a, 0x9d, 0x79, 0xbd, 0x46, 0x5f, 0x48, 0x90,
	0xdc, 0x85, 0x75, 0x7a, 0xca, 0x93, 0x4a, 0x44, 0x34, 0xf6, 0xe7, 0x34, 0x77, 0x36, 0x91, 0xb5,
	0xd6, 0x80, 0x3f, 0xd2, 0x9c, 0x3c, 0x80, 0x69, 0xc2, 0x53, 0x9e, 0x54, 0x89, 0x1f, 0x72, 0x69,
	0x1f, 0x30, 0x87, 0x20, 0x6f, 0x43, 0xe3, 0xfb, 0x1a, 0x46, 0x2a, 0xfd, 0x75, 0x95, 0xfa, 0x1f,
	0x4d, 0x55, 0x78, 0x43, 0xbd, 0x0f, 0x1b, 0x09, 0x0b, 0x39, 0x4d, 0x5b, 0xe6, 0x0d, 0x64, 0x4e,
	0x14, 0xdc, 0x10, 0xef, 0x80, 0x95, 0xf3, 0x60, 0xe1, 0xdc, 0xec, 0xf4, 0x9c, 0x57, 0x3c, 0x58,
	0x78, 0x08, 0xcb, 0x9b, 0xd4, 0xbe, 0x45, 0x6e, 0x5d, 0x78, 0x93, 0xda, 0xe7, 0xc9, 0x3d, 0x98,
	0x34, 0x82, 0xba, 0x24, 0xff, 0xc5, 0xe4, 0xac, 0x37, 0x28, 0x5e, 0x94, 0x3d, 0x80, 0x06, 0x28,
	0x1d, 0x07, 0x9d, 0xab, 0x32, 0x98, 0xd5, 0xb0, 0xd7, 0x61, 0xb8, 0x3f, 0xc0, 0x5a, 0xd7, 0x63,
	0x5b, 0xe7, 0x6a, 0x5e, 0x2a, 0x81, 0x6c, 0xc3, 0xb8, 0x4a, 0x03, 0x56, 0x08, 0xca, 0x53, 0x3d,
	0xc1, 0x0d, 0xaf, 0x0b, 0xb9, 0xbf, 0xf7, 0x60, 0xaa, 0x53, 0xd9, 0x38, 0x22, 0x0f, 0x60, 0x74,
	0x42, 0x8f, 0xd9, 0xfb, 0xac, 0x48, 0x74, 0x1f, 0x5f, 0xc7, 0xad, 0xbc, 0xd5, 0xa0, 0xd7, 0xa8,
	0x57, 0xe3, 0xd1, 0xbb, 0x42, 0x3c, 0xea, 0x36, 0x62, 0x76, 0xda, 0x88, 0x03, 0x43, 0x7d, 0x05,
	0xf4, 0xd3, 0xa5, 0x16, 0xe5, 0x4b, 0xa0, 0xc9, 0x97, 0x7a, 0x2d, 0x36, 0xb2, 0xd4, 0x15, 0xac,
	0xe4, 0x61, 0x45, 0x63, 0xfd, 0x5e, 0x6c, 0x64, 0x59, 0x77, 0x27, 0x8c, 0xcf, 0x23, 0xa1, 0xdf,
	0x8b, 0x5a, 0x92, 0xdb, 0xa5, 0x49, 0x1e, 0xab, 0xed, 0x5e, 0x58, 0xdb, 0x2d, 0xc7, 0xfd, 0xd3,
	0x00, 0xbb, 0x0d, 0xcc, 0xca, 0x69, 0x8d, 0x6b, 0x9c, 0xb6, 0xdb, 0x34, 0xef, 0xc2, 0xfa, 0x6a,
	0x55, 0x99, 0x58, 0x55, 0x6b, 0x65, 0xb7, 0xa2, 0x9e, 0xc3, 0x66, 0x4d, 0x6a, 0x3d, 0xaa, 0x29,
	0x74, 0x53, 0x8f, 0xdf, 0xd5, 0xa4, 0x79, 0xd3, 0xf2, 0x0c, 0xe2, 0xfe, 0xd1, 0x03, 0x4b, 0x5e,
	0xdd, 0xeb, 0xe4, 0xf3, 0x2a, 0x3f, 0x07, 0x37, 0xa0, 0x8f, 0x0d, 0x44, 0xe7, 0x50, 0x09, 0xff,
	0x62, 0x12, 0xcf, 0xe9, 0x8d, 0xa3, 0xab, 0xf7, 0x46, 0xfb, 0xfc, 0xde, 0xe8, 0x0a, 0x18, 0xd5,
	0xf1, 0x90, 0x67, 0x49, 0x99, 0x38, 0xc9, 0x8a, 0x85, 0x1e, 0x83, 0xb5, 0x28, 0x35, 0x3a, 0xce,
	0x3a, 0xa7, 0xb5, 0x58, 0xff, 0x87, 0xa0, 0xca, 0x6c, 0xff, 0x43, 0x50, 0xe7, 0xc0, 0x30, 0x88,
	0x68, 0x9a, 0xb2, 0x18, 0x63, 0x63, 0x7b, 0xb5, 0xf8, 0x7c, 0xf4, 0xcb, 0x20, 0xa2, 0xa7, 0x7e,
	0xfe, 0xee, 0xdd, 0x00, 0xff, 0xe4, 0xbe, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x31, 0x32,
	0xed, 0xd6, 0x0d, 0x00, 0x00,
}
