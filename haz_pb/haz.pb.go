// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: haz.proto

package haz_pb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Quake is for earthquake information.
type Quake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique public identifier for this quake.
	PublicID string `protobuf:"bytes,1,opt,name=public_iD,json=publicID,proto3" json:"public_iD,omitempty"`
	// the origin time of the quake.
	Time *Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// the modification time of the quake information.
	ModificationTime *Timestamp `protobuf:"bytes,3,opt,name=modification_time,json=modificationTime,proto3" json:"modification_time,omitempty"`
	// latitude of the quake location.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude of the quake location.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// the depth of the quake in km.
	Depth float64 `protobuf:"fixed64,6,opt,name=depth,proto3" json:"depth,omitempty"`
	// magnitude of the quake.
	Magnitude float64 `protobuf:"fixed64,7,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	// distance and direction to the nearest locality.
	Locality string `protobuf:"bytes,8,opt,name=locality,proto3" json:"locality,omitempty"`
	// the quality of this information; `best`, `good`, `caution`, `deleted`.
	Quality string `protobuf:"bytes,9,opt,name=quality,proto3" json:"quality,omitempty"`
	// the calculated MMI shaking at the closest locality in the New Zealand region.
	Mmi int32 `protobuf:"varint,10,opt,name=mmi,proto3" json:"mmi,omitempty"`
	// indicating if this quake is in New Zealand region
	InNewzealand bool `protobuf:"varint,11,opt,name=in_newzealand,json=inNewzealand,proto3" json:"in_newzealand,omitempty"`
}

func (x *Quake) Reset() {
	*x = Quake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quake) ProtoMessage() {}

func (x *Quake) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quake.ProtoReflect.Descriptor instead.
func (*Quake) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{0}
}

func (x *Quake) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *Quake) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Quake) GetModificationTime() *Timestamp {
	if x != nil {
		return x.ModificationTime
	}
	return nil
}

func (x *Quake) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Quake) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Quake) GetDepth() float64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Quake) GetMagnitude() float64 {
	if x != nil {
		return x.Magnitude
	}
	return 0
}

func (x *Quake) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Quake) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *Quake) GetMmi() int32 {
	if x != nil {
		return x.Mmi
	}
	return 0
}

func (x *Quake) GetInNewzealand() bool {
	if x != nil {
		return x.InNewzealand
	}
	return false
}

// Timestamp for encoding time stamps.
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix time in seconds
	Sec int64 `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	// Fractional part of time in nanoseconds.
	Nsec int64 `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{1}
}

func (x *Timestamp) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *Timestamp) GetNsec() int64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

type Quakes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quakes []*Quake `protobuf:"bytes,1,rep,name=quakes,proto3" json:"quakes,omitempty"`
}

func (x *Quakes) Reset() {
	*x = Quakes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quakes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quakes) ProtoMessage() {}

func (x *Quakes) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quakes.ProtoReflect.Descriptor instead.
func (*Quakes) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{2}
}

func (x *Quakes) GetQuakes() []*Quake {
	if x != nil {
		return x.Quakes
	}
	return nil
}

type Volcano struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique identifier for the volcano.
	VolcanoID string `protobuf:"bytes,1,opt,name=volcano_iD,json=volcanoID,proto3" json:"volcano_iD,omitempty"`
	// the volcano title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// latitude of the volcano.
	Latitude float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude of the volcano.
	Longitude float64 `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Val       *VAL    `protobuf:"bytes,5,opt,name=val,proto3" json:"val,omitempty"`
	//aviation colour code
	Acc string `protobuf:"bytes,6,opt,name=acc,proto3" json:"acc,omitempty"`
}

func (x *Volcano) Reset() {
	*x = Volcano{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volcano) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volcano) ProtoMessage() {}

func (x *Volcano) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volcano.ProtoReflect.Descriptor instead.
func (*Volcano) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{3}
}

func (x *Volcano) GetVolcanoID() string {
	if x != nil {
		return x.VolcanoID
	}
	return ""
}

func (x *Volcano) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Volcano) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Volcano) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Volcano) GetVal() *VAL {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *Volcano) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

// volcanic alert level.
type VAL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Activity string `protobuf:"bytes,2,opt,name=activity,proto3" json:"activity,omitempty"`
	Hazards  string `protobuf:"bytes,3,opt,name=hazards,proto3" json:"hazards,omitempty"`
}

func (x *VAL) Reset() {
	*x = VAL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VAL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VAL) ProtoMessage() {}

func (x *VAL) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VAL.ProtoReflect.Descriptor instead.
func (*VAL) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{4}
}

func (x *VAL) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *VAL) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *VAL) GetHazards() string {
	if x != nil {
		return x.Hazards
	}
	return ""
}

type Volcanoes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volcanoes []*Volcano `protobuf:"bytes,1,rep,name=volcanoes,proto3" json:"volcanoes,omitempty"`
}

func (x *Volcanoes) Reset() {
	*x = Volcanoes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volcanoes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volcanoes) ProtoMessage() {}

func (x *Volcanoes) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volcanoes.ProtoReflect.Descriptor instead.
func (*Volcanoes) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{5}
}

func (x *Volcanoes) GetVolcanoes() []*Volcano {
	if x != nil {
		return x.Volcanoes
	}
	return nil
}

type MMI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latitude of the mmi.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude of the mmi.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// the mmi at the location.  Currently the max mmi.
	Mmi int32 `protobuf:"varint,3,opt,name=mmi,proto3" json:"mmi,omitempty"`
	// count of mmi values at the location.
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	//count_mmi for the location
	MmiSummary map[int32]int32 `protobuf:"bytes,5,rep,name=mmi_summary,json=mmiSummary,proto3" json:"mmi_summary,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MMI) Reset() {
	*x = MMI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MMI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MMI) ProtoMessage() {}

func (x *MMI) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MMI.ProtoReflect.Descriptor instead.
func (*MMI) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{6}
}

func (x *MMI) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *MMI) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *MMI) GetMmi() int32 {
	if x != nil {
		return x.Mmi
	}
	return 0
}

func (x *MMI) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MMI) GetMmiSummary() map[int32]int32 {
	if x != nil {
		return x.MmiSummary
	}
	return nil
}

type Shaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmi        []*MMI          `protobuf:"bytes,1,rep,name=mmi,proto3" json:"mmi,omitempty"`
	MmiSummary map[int32]int32 `protobuf:"bytes,2,rep,name=mmi_summary,json=mmiSummary,proto3" json:"mmi_summary,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MmiTotal   int32           `protobuf:"varint,3,opt,name=mmi_total,json=mmiTotal,proto3" json:"mmi_total,omitempty"`
}

func (x *Shaking) Reset() {
	*x = Shaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shaking) ProtoMessage() {}

func (x *Shaking) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shaking.ProtoReflect.Descriptor instead.
func (*Shaking) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{7}
}

func (x *Shaking) GetMmi() []*MMI {
	if x != nil {
		return x.Mmi
	}
	return nil
}

func (x *Shaking) GetMmiSummary() map[int32]int32 {
	if x != nil {
		return x.MmiSummary
	}
	return nil
}

func (x *Shaking) GetMmiTotal() int32 {
	if x != nil {
		return x.MmiTotal
	}
	return 0
}

type Story struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string     `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Link      string     `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Published *Timestamp `protobuf:"bytes,3,opt,name=published,proto3" json:"published,omitempty"`
	Type      string     `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Tag       string     `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Val       int32      `protobuf:"varint,6,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Story) Reset() {
	*x = Story{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Story) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Story) ProtoMessage() {}

func (x *Story) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Story.ProtoReflect.Descriptor instead.
func (*Story) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{8}
}

func (x *Story) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Story) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Story) GetPublished() *Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *Story) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Story) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Story) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stories []*Story `protobuf:"bytes,1,rep,name=stories,proto3" json:"stories,omitempty"`
	Page    int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Total   int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *News) Reset() {
	*x = News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{9}
}

func (x *News) GetStories() []*Story {
	if x != nil {
		return x.Stories
	}
	return nil
}

func (x *News) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *News) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Count int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{10}
}

func (x *Rate) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Rate) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QuakeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// quakes per day
	PerDay []*Rate `protobuf:"bytes,1,rep,name=per_day,json=perDay,proto3" json:"per_day,omitempty"`
	// magnitude count over the last 7 days
	Week map[int32]int32 `protobuf:"bytes,2,rep,name=week,proto3" json:"week,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// magnitude count over the last 28 days
	Month map[int32]int32 `protobuf:"bytes,3,rep,name=month,proto3" json:"month,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// magnitude count over the last 365 days
	Year map[int32]int32 `protobuf:"bytes,4,rep,name=year,proto3" json:"year,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QuakeStats) Reset() {
	*x = QuakeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuakeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuakeStats) ProtoMessage() {}

func (x *QuakeStats) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuakeStats.ProtoReflect.Descriptor instead.
func (*QuakeStats) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{11}
}

func (x *QuakeStats) GetPerDay() []*Rate {
	if x != nil {
		return x.PerDay
	}
	return nil
}

func (x *QuakeStats) GetWeek() map[int32]int32 {
	if x != nil {
		return x.Week
	}
	return nil
}

func (x *QuakeStats) GetMonth() map[int32]int32 {
	if x != nil {
		return x.Month
	}
	return nil
}

func (x *QuakeStats) GetYear() map[int32]int32 {
	if x != nil {
		return x.Year
	}
	return nil
}

// QuakeTechnical for encoding technical information about a quake.
// More information than haz.Quake.
type QuakeTechnical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicID         string        `protobuf:"bytes,1,opt,name=public_iD,json=publicID,proto3" json:"public_iD,omitempty"`
	Type             string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Agency           string        `protobuf:"bytes,3,opt,name=agency,proto3" json:"agency,omitempty"`
	Time             *Timestamp    `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	ModificationTime *Timestamp    `protobuf:"bytes,5,opt,name=modification_time,json=modificationTime,proto3" json:"modification_time,omitempty"`
	Latitude         *RealQuantity `protobuf:"bytes,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude        *RealQuantity `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Depth            *RealQuantity `protobuf:"bytes,8,opt,name=depth,proto3" json:"depth,omitempty"`
	DepthType        string        `protobuf:"bytes,9,opt,name=depth_type,json=depthType,proto3" json:"depth_type,omitempty"`
	Method           string        `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	EarthModel       string        `protobuf:"bytes,11,opt,name=earth_model,json=earthModel,proto3" json:"earth_model,omitempty"`
	EvaluationMode   string        `protobuf:"bytes,12,opt,name=evaluation_mode,json=evaluationMode,proto3" json:"evaluation_mode,omitempty"`
	EvaluationStatus string        `protobuf:"bytes,13,opt,name=evaluation_status,json=evaluationStatus,proto3" json:"evaluation_status,omitempty"`
	UsedPhaseCount   int64         `protobuf:"varint,14,opt,name=used_phase_count,json=usedPhaseCount,proto3" json:"used_phase_count,omitempty"`
	UsedStationCount int64         `protobuf:"varint,15,opt,name=used_station_count,json=usedStationCount,proto3" json:"used_station_count,omitempty"`
	StandardError    float64       `protobuf:"fixed64,16,opt,name=standard_error,json=standardError,proto3" json:"standard_error,omitempty"`
	AzimuthalGap     float64       `protobuf:"fixed64,17,opt,name=azimuthal_gap,json=azimuthalGap,proto3" json:"azimuthal_gap,omitempty"`
	MinimumDistance  float64       `protobuf:"fixed64,18,opt,name=minimum_distance,json=minimumDistance,proto3" json:"minimum_distance,omitempty"`
	MaximumDistance  float64       `protobuf:"fixed64,19,opt,name=maximum_distance,json=maximumDistance,proto3" json:"maximum_distance,omitempty"`
	MedianDistance   float64       `protobuf:"fixed64,20,opt,name=median_distance,json=medianDistance,proto3" json:"median_distance,omitempty"`
	Pick             []*Pick       `protobuf:"bytes,21,rep,name=pick,proto3" json:"pick,omitempty"`
	Magnitude        *RealQuantity `protobuf:"bytes,22,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	MagnitudeType    string        `protobuf:"bytes,23,opt,name=magnitude_type,json=magnitudeType,proto3" json:"magnitude_type,omitempty"`
	Magnitudes       []*Magnitude  `protobuf:"bytes,24,rep,name=magnitudes,proto3" json:"magnitudes,omitempty"`
}

func (x *QuakeTechnical) Reset() {
	*x = QuakeTechnical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuakeTechnical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuakeTechnical) ProtoMessage() {}

func (x *QuakeTechnical) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuakeTechnical.ProtoReflect.Descriptor instead.
func (*QuakeTechnical) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{12}
}

func (x *QuakeTechnical) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *QuakeTechnical) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QuakeTechnical) GetAgency() string {
	if x != nil {
		return x.Agency
	}
	return ""
}

func (x *QuakeTechnical) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *QuakeTechnical) GetModificationTime() *Timestamp {
	if x != nil {
		return x.ModificationTime
	}
	return nil
}

func (x *QuakeTechnical) GetLatitude() *RealQuantity {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *QuakeTechnical) GetLongitude() *RealQuantity {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *QuakeTechnical) GetDepth() *RealQuantity {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *QuakeTechnical) GetDepthType() string {
	if x != nil {
		return x.DepthType
	}
	return ""
}

func (x *QuakeTechnical) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *QuakeTechnical) GetEarthModel() string {
	if x != nil {
		return x.EarthModel
	}
	return ""
}

func (x *QuakeTechnical) GetEvaluationMode() string {
	if x != nil {
		return x.EvaluationMode
	}
	return ""
}

func (x *QuakeTechnical) GetEvaluationStatus() string {
	if x != nil {
		return x.EvaluationStatus
	}
	return ""
}

func (x *QuakeTechnical) GetUsedPhaseCount() int64 {
	if x != nil {
		return x.UsedPhaseCount
	}
	return 0
}

func (x *QuakeTechnical) GetUsedStationCount() int64 {
	if x != nil {
		return x.UsedStationCount
	}
	return 0
}

func (x *QuakeTechnical) GetStandardError() float64 {
	if x != nil {
		return x.StandardError
	}
	return 0
}

func (x *QuakeTechnical) GetAzimuthalGap() float64 {
	if x != nil {
		return x.AzimuthalGap
	}
	return 0
}

func (x *QuakeTechnical) GetMinimumDistance() float64 {
	if x != nil {
		return x.MinimumDistance
	}
	return 0
}

func (x *QuakeTechnical) GetMaximumDistance() float64 {
	if x != nil {
		return x.MaximumDistance
	}
	return 0
}

func (x *QuakeTechnical) GetMedianDistance() float64 {
	if x != nil {
		return x.MedianDistance
	}
	return 0
}

func (x *QuakeTechnical) GetPick() []*Pick {
	if x != nil {
		return x.Pick
	}
	return nil
}

func (x *QuakeTechnical) GetMagnitude() *RealQuantity {
	if x != nil {
		return x.Magnitude
	}
	return nil
}

func (x *QuakeTechnical) GetMagnitudeType() string {
	if x != nil {
		return x.MagnitudeType
	}
	return ""
}

func (x *QuakeTechnical) GetMagnitudes() []*Magnitude {
	if x != nil {
		return x.Magnitudes
	}
	return nil
}

type RealQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Uncertainty float64 `protobuf:"fixed64,2,opt,name=uncertainty,proto3" json:"uncertainty,omitempty"`
}

func (x *RealQuantity) Reset() {
	*x = RealQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealQuantity) ProtoMessage() {}

func (x *RealQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealQuantity.ProtoReflect.Descriptor instead.
func (*RealQuantity) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{13}
}

func (x *RealQuantity) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RealQuantity) GetUncertainty() float64 {
	if x != nil {
		return x.Uncertainty
	}
	return 0
}

type StationMagnitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waveform  *Waveform     `protobuf:"bytes,1,opt,name=waveform,proto3" json:"waveform,omitempty"`
	Magnitude *RealQuantity `protobuf:"bytes,2,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	Type      string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Azimuth   float64       `protobuf:"fixed64,4,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Distance  float64       `protobuf:"fixed64,5,opt,name=distance,proto3" json:"distance,omitempty"`
	Residual  float64       `protobuf:"fixed64,6,opt,name=residual,proto3" json:"residual,omitempty"`
	Weight    float64       `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Amplitude *RealQuantity `protobuf:"bytes,8,opt,name=amplitude,proto3" json:"amplitude,omitempty"`
}

func (x *StationMagnitude) Reset() {
	*x = StationMagnitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationMagnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationMagnitude) ProtoMessage() {}

func (x *StationMagnitude) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationMagnitude.ProtoReflect.Descriptor instead.
func (*StationMagnitude) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{14}
}

func (x *StationMagnitude) GetWaveform() *Waveform {
	if x != nil {
		return x.Waveform
	}
	return nil
}

func (x *StationMagnitude) GetMagnitude() *RealQuantity {
	if x != nil {
		return x.Magnitude
	}
	return nil
}

func (x *StationMagnitude) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StationMagnitude) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *StationMagnitude) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *StationMagnitude) GetResidual() float64 {
	if x != nil {
		return x.Residual
	}
	return 0
}

func (x *StationMagnitude) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *StationMagnitude) GetAmplitude() *RealQuantity {
	if x != nil {
		return x.Amplitude
	}
	return nil
}

type Magnitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Magnitude        *RealQuantity       `protobuf:"bytes,1,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	Type             string              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StationCount     int64               `protobuf:"varint,3,opt,name=station_count,json=stationCount,proto3" json:"station_count,omitempty"`
	StationMagnitude []*StationMagnitude `protobuf:"bytes,4,rep,name=station_magnitude,json=stationMagnitude,proto3" json:"station_magnitude,omitempty"`
}

func (x *Magnitude) Reset() {
	*x = Magnitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Magnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Magnitude) ProtoMessage() {}

func (x *Magnitude) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Magnitude.ProtoReflect.Descriptor instead.
func (*Magnitude) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{15}
}

func (x *Magnitude) GetMagnitude() *RealQuantity {
	if x != nil {
		return x.Magnitude
	}
	return nil
}

func (x *Magnitude) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Magnitude) GetStationCount() int64 {
	if x != nil {
		return x.StationCount
	}
	return 0
}

func (x *Magnitude) GetStationMagnitude() []*StationMagnitude {
	if x != nil {
		return x.StationMagnitude
	}
	return nil
}

type Pick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waveform         *Waveform  `protobuf:"bytes,1,opt,name=waveform,proto3" json:"waveform,omitempty"`
	Time             *Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Phase            string     `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Azimuth          float64    `protobuf:"fixed64,4,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Distance         float64    `protobuf:"fixed64,5,opt,name=distance,proto3" json:"distance,omitempty"`
	Residual         float64    `protobuf:"fixed64,6,opt,name=residual,proto3" json:"residual,omitempty"`
	Weight           float64    `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight,omitempty"`
	EvaluationMode   string     `protobuf:"bytes,8,opt,name=evaluation_mode,json=evaluationMode,proto3" json:"evaluation_mode,omitempty"`
	EvaluationStatus string     `protobuf:"bytes,9,opt,name=evaluation_status,json=evaluationStatus,proto3" json:"evaluation_status,omitempty"`
}

func (x *Pick) Reset() {
	*x = Pick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pick) ProtoMessage() {}

func (x *Pick) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pick.ProtoReflect.Descriptor instead.
func (*Pick) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{16}
}

func (x *Pick) GetWaveform() *Waveform {
	if x != nil {
		return x.Waveform
	}
	return nil
}

func (x *Pick) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Pick) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Pick) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *Pick) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Pick) GetResidual() float64 {
	if x != nil {
		return x.Residual
	}
	return 0
}

func (x *Pick) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Pick) GetEvaluationMode() string {
	if x != nil {
		return x.EvaluationMode
	}
	return ""
}

func (x *Pick) GetEvaluationStatus() string {
	if x != nil {
		return x.EvaluationStatus
	}
	return ""
}

type Waveform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Station  string `protobuf:"bytes,2,opt,name=station,proto3" json:"station,omitempty"`
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Channel  string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *Waveform) Reset() {
	*x = Waveform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waveform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waveform) ProtoMessage() {}

func (x *Waveform) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waveform.ProtoReflect.Descriptor instead.
func (*Waveform) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{17}
}

func (x *Waveform) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Waveform) GetStation() string {
	if x != nil {
		return x.Station
	}
	return ""
}

func (x *Waveform) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Waveform) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type StrongShaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latitude of the location.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude of the location.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Network   string  `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Station   string  `protobuf:"bytes,4,opt,name=station,proto3" json:"station,omitempty"`
	Location  string  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// the mmi at the location.
	Mmi  int32   `protobuf:"varint,6,opt,name=mmi,proto3" json:"mmi,omitempty"`
	PgaH float64 `protobuf:"fixed64,7,opt,name=pga_h,json=pgaH,proto3" json:"pga_h,omitempty"`
	PgaV float64 `protobuf:"fixed64,8,opt,name=pga_v,json=pgaV,proto3" json:"pga_v,omitempty"`
	PgvH float64 `protobuf:"fixed64,9,opt,name=pgv_h,json=pgvH,proto3" json:"pgv_h,omitempty"`
	PgvV float64 `protobuf:"fixed64,10,opt,name=pgv_v,json=pgvV,proto3" json:"pgv_v,omitempty"`
}

func (x *StrongShaking) Reset() {
	*x = StrongShaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrongShaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrongShaking) ProtoMessage() {}

func (x *StrongShaking) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrongShaking.ProtoReflect.Descriptor instead.
func (*StrongShaking) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{18}
}

func (x *StrongShaking) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *StrongShaking) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *StrongShaking) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *StrongShaking) GetStation() string {
	if x != nil {
		return x.Station
	}
	return ""
}

func (x *StrongShaking) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *StrongShaking) GetMmi() int32 {
	if x != nil {
		return x.Mmi
	}
	return 0
}

func (x *StrongShaking) GetPgaH() float64 {
	if x != nil {
		return x.PgaH
	}
	return 0
}

func (x *StrongShaking) GetPgaV() float64 {
	if x != nil {
		return x.PgaV
	}
	return 0
}

func (x *StrongShaking) GetPgvH() float64 {
	if x != nil {
		return x.PgvH
	}
	return 0
}

func (x *StrongShaking) GetPgvV() float64 {
	if x != nil {
		return x.PgvV
	}
	return 0
}

type StrongShakingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrongShakings []*StrongShaking `protobuf:"bytes,1,rep,name=strongShakings,proto3" json:"strongShakings,omitempty"`
}

func (x *StrongShakingList) Reset() {
	*x = StrongShakingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_haz_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrongShakingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrongShakingList) ProtoMessage() {}

func (x *StrongShakingList) ProtoReflect() protoreflect.Message {
	mi := &file_haz_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrongShakingList.ProtoReflect.Descriptor instead.
func (*StrongShakingList) Descriptor() ([]byte, []int) {
	return file_haz_proto_rawDescGZIP(), []int{19}
}

func (x *StrongShakingList) GetStrongShakings() []*StrongShaking {
	if x != nil {
		return x.StrongShakings
	}
	return nil
}

var File_haz_proto protoreflect.FileDescriptor

var file_haz_proto_rawDesc = []byte{
	0x0a, 0x09, 0x68, 0x61, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x68, 0x61, 0x7a,
	0x22, 0xe0, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x61, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x67,
	0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x6d, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x6d, 0x69, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x7a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x4e, 0x65, 0x77, 0x7a, 0x65, 0x61, 0x6c,
	0x61, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x22, 0x2c, 0x0a, 0x06, 0x51, 0x75, 0x61, 0x6b, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x51, 0x75, 0x61, 0x6b, 0x65, 0x52, 0x06, 0x71, 0x75,
	0x61, 0x6b, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x5f, 0x69, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x68,
	0x61, 0x7a, 0x2e, 0x56, 0x41, 0x4c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x22, 0x51, 0x0a,
	0x03, 0x56, 0x41, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x37, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x52, 0x09,
	0x76, 0x6f, 0x6c, 0x63, 0x61, 0x6e, 0x6f, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x03, 0x4d, 0x4d,
	0x49, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x6d, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x6d, 0x69, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x4d,
	0x4d, 0x49, 0x2e, 0x4d, 0x6d, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6d, 0x6d, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4d, 0x6d, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01,
	0x0a, 0x07, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x03, 0x6d, 0x6d, 0x69,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x4d, 0x4d, 0x49,
	0x52, 0x03, 0x6d, 0x6d, 0x69, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6d, 0x69, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x7a,
	0x2e, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6d, 0x69, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x6d, 0x69, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x6d, 0x69, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x6d, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x97, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x04, 0x4e, 0x65,
	0x77, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x40, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6b, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x51, 0x75, 0x61, 0x6b,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x51, 0x75, 0x61, 0x6b,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x51, 0x75, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x57, 0x65, 0x65, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x59, 0x65,
	0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbb, 0x07, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x61, 0x72, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x61, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74,
	0x68, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x61, 0x6c, 0x47, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x69,
	0x63, 0x6b, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x50,
	0x69, 0x63, 0x6b, 0x52, 0x04, 0x70, 0x69, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x67,
	0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x61, 0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x4d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x73, 0x22, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x67,
	0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x61, 0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61,
	0x7a, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x4d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x61, 0x7a,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x67,
	0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x04, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x29,
	0x0a, 0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x08, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x6d, 0x69, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x67, 0x61, 0x5f, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x67, 0x61, 0x48, 0x12, 0x13, 0x0a, 0x05,
	0x70, 0x67, 0x61, 0x5f, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x67, 0x61,
	0x56, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x67, 0x76, 0x5f, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x67, 0x76, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x67, 0x76, 0x5f, 0x76, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x67, 0x76, 0x56, 0x22, 0x4f, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x7a, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2f, 0x68, 0x61, 0x7a, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_haz_proto_rawDescOnce sync.Once
	file_haz_proto_rawDescData = file_haz_proto_rawDesc
)

func file_haz_proto_rawDescGZIP() []byte {
	file_haz_proto_rawDescOnce.Do(func() {
		file_haz_proto_rawDescData = protoimpl.X.CompressGZIP(file_haz_proto_rawDescData)
	})
	return file_haz_proto_rawDescData
}

var file_haz_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_haz_proto_goTypes = []interface{}{
	(*Quake)(nil),             // 0: haz.Quake
	(*Timestamp)(nil),         // 1: haz.Timestamp
	(*Quakes)(nil),            // 2: haz.Quakes
	(*Volcano)(nil),           // 3: haz.Volcano
	(*VAL)(nil),               // 4: haz.VAL
	(*Volcanoes)(nil),         // 5: haz.Volcanoes
	(*MMI)(nil),               // 6: haz.MMI
	(*Shaking)(nil),           // 7: haz.Shaking
	(*Story)(nil),             // 8: haz.Story
	(*News)(nil),              // 9: haz.News
	(*Rate)(nil),              // 10: haz.Rate
	(*QuakeStats)(nil),        // 11: haz.QuakeStats
	(*QuakeTechnical)(nil),    // 12: haz.QuakeTechnical
	(*RealQuantity)(nil),      // 13: haz.RealQuantity
	(*StationMagnitude)(nil),  // 14: haz.StationMagnitude
	(*Magnitude)(nil),         // 15: haz.Magnitude
	(*Pick)(nil),              // 16: haz.Pick
	(*Waveform)(nil),          // 17: haz.Waveform
	(*StrongShaking)(nil),     // 18: haz.StrongShaking
	(*StrongShakingList)(nil), // 19: haz.StrongShakingList
	nil,                       // 20: haz.MMI.MmiSummaryEntry
	nil,                       // 21: haz.Shaking.MmiSummaryEntry
	nil,                       // 22: haz.QuakeStats.WeekEntry
	nil,                       // 23: haz.QuakeStats.MonthEntry
	nil,                       // 24: haz.QuakeStats.YearEntry
}
var file_haz_proto_depIdxs = []int32{
	1,  // 0: haz.Quake.time:type_name -> haz.Timestamp
	1,  // 1: haz.Quake.modification_time:type_name -> haz.Timestamp
	0,  // 2: haz.Quakes.quakes:type_name -> haz.Quake
	4,  // 3: haz.Volcano.val:type_name -> haz.VAL
	3,  // 4: haz.Volcanoes.volcanoes:type_name -> haz.Volcano
	20, // 5: haz.MMI.mmi_summary:type_name -> haz.MMI.MmiSummaryEntry
	6,  // 6: haz.Shaking.mmi:type_name -> haz.MMI
	21, // 7: haz.Shaking.mmi_summary:type_name -> haz.Shaking.MmiSummaryEntry
	1,  // 8: haz.Story.published:type_name -> haz.Timestamp
	8,  // 9: haz.News.stories:type_name -> haz.Story
	1,  // 10: haz.Rate.time:type_name -> haz.Timestamp
	10, // 11: haz.QuakeStats.per_day:type_name -> haz.Rate
	22, // 12: haz.QuakeStats.week:type_name -> haz.QuakeStats.WeekEntry
	23, // 13: haz.QuakeStats.month:type_name -> haz.QuakeStats.MonthEntry
	24, // 14: haz.QuakeStats.year:type_name -> haz.QuakeStats.YearEntry
	1,  // 15: haz.QuakeTechnical.time:type_name -> haz.Timestamp
	1,  // 16: haz.QuakeTechnical.modification_time:type_name -> haz.Timestamp
	13, // 17: haz.QuakeTechnical.latitude:type_name -> haz.RealQuantity
	13, // 18: haz.QuakeTechnical.longitude:type_name -> haz.RealQuantity
	13, // 19: haz.QuakeTechnical.depth:type_name -> haz.RealQuantity
	16, // 20: haz.QuakeTechnical.pick:type_name -> haz.Pick
	13, // 21: haz.QuakeTechnical.magnitude:type_name -> haz.RealQuantity
	15, // 22: haz.QuakeTechnical.magnitudes:type_name -> haz.Magnitude
	17, // 23: haz.StationMagnitude.waveform:type_name -> haz.Waveform
	13, // 24: haz.StationMagnitude.magnitude:type_name -> haz.RealQuantity
	13, // 25: haz.StationMagnitude.amplitude:type_name -> haz.RealQuantity
	13, // 26: haz.Magnitude.magnitude:type_name -> haz.RealQuantity
	14, // 27: haz.Magnitude.station_magnitude:type_name -> haz.StationMagnitude
	17, // 28: haz.Pick.waveform:type_name -> haz.Waveform
	1,  // 29: haz.Pick.time:type_name -> haz.Timestamp
	18, // 30: haz.StrongShakingList.strongShakings:type_name -> haz.StrongShaking
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_haz_proto_init() }
func file_haz_proto_init() {
	if File_haz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_haz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quakes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volcano); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VAL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volcanoes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MMI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Story); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuakeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuakeTechnical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationMagnitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Magnitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waveform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrongShaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_haz_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrongShakingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_haz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_haz_proto_goTypes,
		DependencyIndexes: file_haz_proto_depIdxs,
		MessageInfos:      file_haz_proto_msgTypes,
	}.Build()
	File_haz_proto = out.File
	file_haz_proto_rawDesc = nil
	file_haz_proto_goTypes = nil
	file_haz_proto_depIdxs = nil
}
