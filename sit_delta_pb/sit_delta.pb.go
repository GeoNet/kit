// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sit_delta.proto

/*
Package sit_delta_pb is a generated protocol buffer package.

It is generated from these files:
	sit_delta.proto

It has these top-level messages:
	Point
	Span
	Site
	Location
	Equipment
	Equipment_Install
	Mark
	InstalledMonument
	Monument
*/
package sit_delta_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A geographical point on NZGD2000
type Point struct {
	// Latitude - geographical latitude of the point.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude - geographical longitude of the point.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Elevation - geographical height of the point.
	Elevation float64 `protobuf:"fixed64,3,opt,name=elevation" json:"elevation,omitempty"`
	// Datum
	Datum string `protobuf:"bytes,4,opt,name=datum" json:"datum,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Point) GetElevation() float64 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *Point) GetDatum() string {
	if m != nil {
		return m.Datum
	}
	return ""
}

// A time span that has a start and an end.
type Span struct {
	// Start - time in Unix seconds.
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// End - time in Unix seconds.  A future date of 9999-01-01T00:00:00Z is used to indicate still open.
	End int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Span) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Span) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// A site record (represents a seismic site OR gps mark (OR tsunami station?))
type Site struct {
	// The site code or station ID of the site
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	// The location of the site
	Point *Point `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
	// The ground relationship
	GroundRelationship float64 `protobuf:"fixed64,3,opt,name=ground_relationship,json=groundRelationship" json:"ground_relationship,omitempty"`
	// The network code
	Network string `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	// The date the site was established
	Span *Span `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
	// Information for a 'Mark' site (will only exist if site is a mark)
	Mark *Mark `protobuf:"bytes,6,opt,name=mark" json:"mark,omitempty"`
	// List of 'Location' (for seismic + tsunami)
	Locations         []*Location          `protobuf:"bytes,7,rep,name=locations" json:"locations,omitempty"`
	EquipmentInstalls []*Equipment_Install `protobuf:"bytes,8,rep,name=equipment_installs,json=equipmentInstalls" json:"equipment_installs,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Site) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Site) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Site) GetGroundRelationship() float64 {
	if m != nil {
		return m.GroundRelationship
	}
	return 0
}

func (m *Site) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Site) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Site) GetMark() *Mark {
	if m != nil {
		return m.Mark
	}
	return nil
}

func (m *Site) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Site) GetEquipmentInstalls() []*Equipment_Install {
	if m != nil {
		return m.EquipmentInstalls
	}
	return nil
}

// A location record (seismic site, tsunami guage, etc.)
type Location struct {
	// The actual 'location' value (i.e. 40)
	Location string `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// The geographical location
	Point  *Point `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	// depth? maybe?
	GroundRelationship float64 `protobuf:"fixed64,4,opt,name=ground_relationship,json=groundRelationship" json:"ground_relationship,omitempty"`
	Notes              string  `protobuf:"bytes,5,opt,name=notes" json:"notes,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Location) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Location) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Location) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Location) GetGroundRelationship() float64 {
	if m != nil {
		return m.GroundRelationship
	}
	return 0
}

func (m *Location) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

// An equipment record
type Equipment struct {
	AssetNumber  string            `protobuf:"bytes,1,opt,name=asset_number,json=assetNumber" json:"asset_number,omitempty"`
	SerialNumber string            `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Manufacturer string            `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Model        string            `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	Type         string            `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Owner        string            `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
	ExtrasType   string            `protobuf:"bytes,7,opt,name=extras_type,json=extrasType" json:"extras_type,omitempty"`
	Extras       map[string]string `protobuf:"bytes,8,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Equipment) GetAssetNumber() string {
	if m != nil {
		return m.AssetNumber
	}
	return ""
}

func (m *Equipment) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Equipment) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Equipment) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Equipment) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Equipment) GetExtrasType() string {
	if m != nil {
		return m.ExtrasType
	}
	return ""
}

func (m *Equipment) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

// An equipment install record
type Equipment_Install struct {
	Equipment *Equipment `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Installed *Span      `protobuf:"bytes,2,opt,name=installed" json:"installed,omitempty"`
}

func (m *Equipment_Install) Reset()                    { *m = Equipment_Install{} }
func (m *Equipment_Install) String() string            { return proto.CompactTextString(m) }
func (*Equipment_Install) ProtoMessage()               {}
func (*Equipment_Install) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Equipment_Install) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Equipment_Install) GetInstalled() *Span {
	if m != nil {
		return m.Installed
	}
	return nil
}

// A GNSS Mark.
type Mark struct {
	InstalledMonument []*InstalledMonument `protobuf:"bytes,1,rep,name=installed_monument,json=installedMonument" json:"installed_monument,omitempty"`
}

func (m *Mark) Reset()                    { *m = Mark{} }
func (m *Mark) String() string            { return proto.CompactTextString(m) }
func (*Mark) ProtoMessage()               {}
func (*Mark) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Mark) GetInstalledMonument() []*InstalledMonument {
	if m != nil {
		return m.InstalledMonument
	}
	return nil
}

type InstalledMonument struct {
	Span     *Span     `protobuf:"bytes,1,opt,name=span" json:"span,omitempty"`
	Monument *Monument `protobuf:"bytes,2,opt,name=monument" json:"monument,omitempty"`
}

func (m *InstalledMonument) Reset()                    { *m = InstalledMonument{} }
func (m *InstalledMonument) String() string            { return proto.CompactTextString(m) }
func (*InstalledMonument) ProtoMessage()               {}
func (*InstalledMonument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InstalledMonument) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *InstalledMonument) GetMonument() *Monument {
	if m != nil {
		return m.Monument
	}
	return nil
}

// A monument for a Mark
type Monument struct {
	DomesNumber string `protobuf:"bytes,1,opt,name=domes_number,json=domesNumber" json:"domes_number,omitempty"`
}

func (m *Monument) Reset()                    { *m = Monument{} }
func (m *Monument) String() string            { return proto.CompactTextString(m) }
func (*Monument) ProtoMessage()               {}
func (*Monument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Monument) GetDomesNumber() string {
	if m != nil {
		return m.DomesNumber
	}
	return ""
}

func init() {
	proto.RegisterType((*Point)(nil), "sit_delta.Point")
	proto.RegisterType((*Span)(nil), "sit_delta.Span")
	proto.RegisterType((*Site)(nil), "sit_delta.site")
	proto.RegisterType((*Location)(nil), "sit_delta.Location")
	proto.RegisterType((*Equipment)(nil), "sit_delta.Equipment")
	proto.RegisterType((*Equipment_Install)(nil), "sit_delta.Equipment_Install")
	proto.RegisterType((*Mark)(nil), "sit_delta.Mark")
	proto.RegisterType((*InstalledMonument)(nil), "sit_delta.InstalledMonument")
	proto.RegisterType((*Monument)(nil), "sit_delta.Monument")
}

func init() { proto.RegisterFile("sit_delta.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0x13, 0x3f,
	0x10, 0xd5, 0x26, 0x9b, 0x34, 0x3b, 0xc9, 0xef, 0xd7, 0xc6, 0xad, 0xd0, 0xaa, 0xaa, 0x44, 0xba,
	0x95, 0x50, 0x2f, 0x4d, 0x45, 0xb8, 0x14, 0x8e, 0x48, 0x3d, 0x54, 0x50, 0x84, 0x5c, 0x4e, 0x5c,
	0x56, 0x6e, 0xd7, 0x94, 0x55, 0x76, 0xed, 0xc5, 0xf6, 0xb6, 0xf4, 0x43, 0xf1, 0x51, 0x38, 0xf3,
	0x75, 0x90, 0xc7, 0x8e, 0x13, 0x92, 0x16, 0x71, 0xf3, 0xbc, 0xf7, 0x26, 0xf3, 0x67, 0xdf, 0x04,
	0xb6, 0x75, 0x69, 0xf2, 0x82, 0x57, 0x86, 0x4d, 0x1b, 0x25, 0x8d, 0x24, 0x49, 0x00, 0xb2, 0x16,
	0x7a, 0x1f, 0x65, 0x29, 0x0c, 0xd9, 0x87, 0x41, 0xc5, 0x4c, 0x69, 0xda, 0x82, 0xa7, 0xd1, 0x24,
	0x3a, 0x8e, 0x68, 0x88, 0xc9, 0x01, 0x24, 0x95, 0x14, 0xb7, 0x8e, 0xec, 0x20, 0xb9, 0x04, 0x2c,
	0xcb, 0x2b, 0x7e, 0xc7, 0x4c, 0x29, 0x45, 0xda, 0x75, 0x6c, 0x00, 0xc8, 0x1e, 0xf4, 0x0a, 0x66,
	0xda, 0x3a, 0x8d, 0x27, 0xd1, 0x71, 0x42, 0x5d, 0x90, 0x4d, 0x21, 0xbe, 0x6a, 0x18, 0xb2, 0xda,
	0x30, 0x65, 0xb0, 0x64, 0x97, 0xba, 0x80, 0xec, 0x40, 0x97, 0x8b, 0x02, 0x2b, 0x75, 0xa9, 0x7d,
	0x66, 0xbf, 0x3a, 0x10, 0xeb, 0xd2, 0x70, 0x42, 0x20, 0xbe, 0x91, 0xbe, 0xc5, 0x84, 0xe2, 0x9b,
	0xbc, 0x80, 0x5e, 0x63, 0x67, 0xc0, 0x84, 0xe1, 0x6c, 0x67, 0xba, 0x9c, 0x17, 0x67, 0xa3, 0x8e,
	0x26, 0xa7, 0xb0, 0x7b, 0xab, 0x64, 0x2b, 0x8a, 0x5c, 0xf1, 0x0a, 0xbb, 0xd3, 0x5f, 0xcb, 0xc6,
	0xb7, 0x4c, 0x1c, 0x45, 0x57, 0x18, 0x92, 0xc2, 0x96, 0xe0, 0xe6, 0x5e, 0xaa, 0xb9, 0xef, 0x7e,
	0x11, 0x92, 0x23, 0x88, 0x75, 0xc3, 0x44, 0xda, 0xc3, 0x8a, 0xdb, 0x2b, 0x15, 0xed, 0x58, 0x14,
	0x49, 0x2b, 0xaa, 0x99, 0x9a, 0xa7, 0xfd, 0x0d, 0xd1, 0x25, 0x53, 0x73, 0x8a, 0x24, 0x79, 0x69,
	0x77, 0x7b, 0xe3, 0x6a, 0xa6, 0x5b, 0x93, 0xee, 0xf1, 0x70, 0xb6, 0xbb, 0xa2, 0x7c, 0xef, 0x39,
	0xba, 0x54, 0x91, 0x77, 0x40, 0xf8, 0xb7, 0xb6, 0x6c, 0x6a, 0x2e, 0x4c, 0x5e, 0x0a, 0x6d, 0x58,
	0x55, 0xe9, 0x74, 0x80, 0xb9, 0x07, 0x2b, 0xb9, 0xe7, 0x41, 0x74, 0xe1, 0x44, 0x74, 0x1c, 0xf2,
	0x3c, 0xa2, 0xb3, 0x1f, 0x11, 0x0c, 0x16, 0x45, 0xd0, 0x04, 0xfe, 0xed, 0x37, 0x1c, 0xe2, 0x7f,
	0xde, 0xf2, 0x33, 0xe8, 0x6b, 0xc3, 0x4c, 0xab, 0x71, 0xb1, 0x09, 0xf5, 0xd1, 0x53, 0xdb, 0x8f,
	0x9f, 0xdc, 0xfe, 0x1e, 0xf4, 0x84, 0x34, 0x5c, 0xe3, 0x92, 0x13, 0xea, 0x82, 0xec, 0x67, 0x07,
	0x92, 0x30, 0x18, 0x39, 0x84, 0x11, 0xd3, 0x9a, 0x9b, 0x5c, 0xb4, 0xf5, 0x35, 0x57, 0xbe, 0xe9,
	0x21, 0x62, 0x1f, 0x10, 0x22, 0x47, 0xf0, 0x9f, 0xe6, 0xaa, 0x64, 0xd5, 0x42, 0xd3, 0x41, 0xcd,
	0xc8, 0x81, 0x5e, 0x94, 0xc1, 0xa8, 0x66, 0xa2, 0xfd, 0xc2, 0x6e, 0x4c, 0xab, 0xb8, 0xf2, 0xad,
	0xff, 0x81, 0xd9, 0x7e, 0x6a, 0x59, 0xf0, 0x6a, 0xe1, 0x64, 0x0c, 0xac, 0x21, 0xcd, 0x43, 0xc3,
	0x7d, 0x93, 0xf8, 0xb6, 0x4a, 0x79, 0x2f, 0xb8, 0xc2, 0x2f, 0x9f, 0x50, 0x17, 0x90, 0xe7, 0x30,
	0xe4, 0xdf, 0x8d, 0x62, 0x3a, 0xc7, 0x84, 0x2d, 0xe4, 0xc0, 0x41, 0x9f, 0x6c, 0xda, 0x19, 0xf4,
	0x5d, 0xe4, 0xbf, 0xe5, 0xe4, 0xb1, 0x6f, 0x39, 0x3d, 0x47, 0xc9, 0xb9, 0x30, 0xea, 0x81, 0x7a,
	0xfd, 0xfe, 0x6b, 0x18, 0xae, 0xc0, 0xf6, 0x7e, 0xe6, 0xfc, 0xc1, 0x2f, 0xc3, 0x3e, 0x6d, 0x47,
	0x77, 0xac, 0x6a, 0xb9, 0x1f, 0xde, 0x05, 0x6f, 0x3a, 0x67, 0x51, 0x76, 0x07, 0xe3, 0x0d, 0x9f,
	0x90, 0x19, 0x24, 0xc1, 0x29, 0xf8, 0x33, 0xc3, 0xd9, 0xde, 0x63, 0xcd, 0xd0, 0xa5, 0x8c, 0x9c,
	0x40, 0xe2, 0xbd, 0xc8, 0x0b, 0xef, 0x91, 0x8d, 0xbb, 0x58, 0x2a, 0xb2, 0x2b, 0x88, 0xed, 0x15,
	0x58, 0x33, 0x07, 0x30, 0xaf, 0xa5, 0x68, 0x7d, 0xcd, 0x75, 0x33, 0x5f, 0x2c, 0x44, 0x97, 0x5e,
	0x43, 0xc7, 0xe5, 0x3a, 0x94, 0x95, 0x30, 0xde, 0xd0, 0x85, 0x5b, 0x8d, 0xfe, 0x76, 0xab, 0xa7,
	0x30, 0x08, 0xc5, 0x5d, 0xf3, 0xab, 0x57, 0x18, 0x6a, 0x06, 0x51, 0x76, 0x02, 0x83, 0x50, 0xe1,
	0x10, 0x46, 0x85, 0xac, 0xb9, 0x5e, 0x73, 0x21, 0x62, 0xce, 0x60, 0x6f, 0xff, 0xff, 0x3c, 0x0a,
	0x3f, 0x97, 0x37, 0xd7, 0xd7, 0x7d, 0xfc, 0x27, 0x7e, 0xf5, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0xb8, 0x9a, 0xc2, 0x9c, 0x05, 0x00, 0x00,
}
